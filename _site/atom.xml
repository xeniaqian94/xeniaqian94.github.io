<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Rose Bullet - Home for Qian Xin</title>
 <link href="http://xeniaqian94.github.io/atom.xml" rel="self"/>
 <link href="http://xeniaqian94.github.io/"/>
 <updated>2015-04-24T14:20:49+08:00</updated>
 <id>http://xeniaqian94.github.io</id>
 <author>
   <name>Qian Xin</name>
   <email>xeniaqian94@gmail.com</email>
 </author>

 
 <entry>
   <title>Understanding About Monad</title>
   <link href="http://xeniaqian94.github.io//2015/04/23/Understanding%20About%20Monad/"/>
   <updated>2015-04-23T00:00:00+08:00</updated>
   <id>http://xeniaqian94.github.io/2015/04/23/Understanding About Monad</id>
   <content type="html">&lt;p&gt;Following last week’s lecture, here is some of my basic understanding and note about Monad.&lt;/p&gt;

&lt;h5 id=&quot;what-is-monad-for&quot;&gt;What is Monad for?&lt;/h5&gt;
&lt;p&gt;Handling execption, e.g. divide by 0.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data Expr = Num Int | Neg Expr | Add Expr Expr | Div Expr Expr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One solution is to use &lt;code&gt;Maybe&lt;/code&gt; datatype.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data Maybe a = Just a | Nothing &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, once divide by 0 occurs, &lt;code&gt;Nothing&lt;/code&gt; is returned as a denote of execption.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval (Div e1 e2) = case eval e2 of
                    Just 0 -&amp;gt; Nothing
                    Just v2 -&amp;gt; case eval e1 of
                                Just v1 -&amp;gt; Just (v1 `div` v2)
                                Nothing -&amp;gt; Nothing
                    Nothing -&amp;gt; Nothing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we may notice 2 branches of &lt;code&gt;eval e2&lt;/code&gt;, either &lt;code&gt;Nothing&lt;/code&gt; or &lt;code&gt;Just x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If it is &lt;code&gt;Nothing&lt;/code&gt;, throw execption by returning &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If it is &lt;code&gt;Just x&lt;/code&gt;, we may pass &lt;code&gt;Just x&lt;/code&gt; to subsequent function application.&lt;/p&gt;

&lt;p&gt;The above 2 branches could be expressed by the &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; in Monad. Quite simple and clean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(&amp;gt;&amp;gt;=) : Maybe a -&amp;gt; (a -&amp;gt; Maybe b) -&amp;gt; Maybe b
(Just x) &amp;gt;&amp;gt;= f = f x
Nothing &amp;gt;&amp;gt;= f = Nothing&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the above &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; definition, &lt;code&gt;eval (Div e1 e2)&lt;/code&gt; can be rewritten as,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval (Div e1 e2) = eval e2 &amp;gt;&amp;gt;= \v2 -&amp;gt;
                   if v2 == 0 then mzero
                   else eval e1 &amp;gt;&amp;gt;= \v1 -&amp;gt;
                        return (v1 `div` v2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;mzero&lt;/code&gt; is a rename of &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Haskell, Monad is defined as a type class.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Monad m where
  (&amp;gt;&amp;gt;=) :: m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b
  return :: a -&amp;gt; m a&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&quot;more-on-state-monad&quot;&gt;More on State Monad&lt;/h5&gt;
&lt;p&gt;State Monad is useful for stateful computation.&lt;/p&gt;

&lt;p&gt;A stateful computation is a function that takes some state and returns a value along with some new state.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;s -&amp;gt; (a, s)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tick :: State Int Int
tick = do n &amp;lt;- get
          put (n+1)
          return n

plusOne :: Int -&amp;gt; Int
plusOne n = execState tick n

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reference from: &lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;http://homepages.inf.ed.ac.uk/wadler/papers/essence/essence.ps&quot;&gt;The Essence of Functional Programming&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;http://www.iis.sinica.edu.tw/~scm/ncs/2009/11/a-monad-primer/&quot;&gt;单子(monad)入门(一)&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;&lt;a href=&quot;http://learnyouahaskell.com/for-a-few-monads-more&quot;&gt;For a Few Monads More&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Posing Guide, Update Continuing</title>
   <link href="http://xeniaqian94.github.io//2015/04/18/Shooting%20Pose/"/>
   <updated>2015-04-18T00:00:00+08:00</updated>
   <id>http://xeniaqian94.github.io/2015/04/18/Shooting Pose</id>
   <content type="html">&lt;p&gt;I like photographing and taking photos. Sometimes, hmm… It is hard to get a good pose, really. :) That is why this post is about, the posing guide from my personal collection.&lt;/p&gt;

&lt;p&gt;Copyright reserved to the original author.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you are…&lt;/p&gt;

&lt;p&gt;By the sea, Instagram: &lt;a href=&quot;http://www.iphoneogram.com/u/303959678&quot;&gt;mia_go_mia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pics/pose/pose1.png&quot; alt=&quot;Along the seaside&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Standing by wall, Wechat: 堂邦嘉真街拍哥 &lt;a href=&quot;http://www.douban.com/people/musickenny/&quot;&gt;eyestore2015&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pics/pose/pose2.jpg&quot; alt=&quot;Standing by wall&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Engrossed by a book, &lt;a href=&quot;http://en.wikipedia.org/wiki/American_Dreams_in_China&quot;&gt;&lt;em&gt;American Dreams in China&lt;/em&gt;&lt;/a&gt;, Juan Du&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/pics/pose/pose44.jpg&quot; alt=&quot;A reading girl&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 

</feed>
